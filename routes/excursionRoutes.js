// routes/excursionRoutes.js
/*const express = require('express');
const router = express.Router();
const { body, param, query } = require('express-validator');
const excursionController = require('../controllers/excursionController');
const { verifyToken } = require('../middlewares/jwt_token');
const { checkRole } = require('../middlewares/checkRole');

// ======= MIDDLEWARES DE VALIDATION =======

// Validation pour cr√©ation/modification d'excursion
const validateExcursion = [
  body('title')
    .notEmpty()
    .withMessage('Le titre est obligatoire')
    .isLength({ min: 5, max: 200 })
    .withMessage('Le titre doit contenir entre 5 et 200 caract√®res')
    .trim(),
    
  body('description')
    .notEmpty()
    .withMessage('La description est obligatoire')
    .isLength({ min: 20, max: 2000 })
    .withMessage('La description doit contenir entre 20 et 2000 caract√®res')
    .trim(),
    
  body('treasureId')
    .notEmpty()
    .withMessage('Le lieu (treasureId) est obligatoire')
    .isMongoId()
    .withMessage('ID du lieu invalide'),
    
  body('date')
    .notEmpty()
    .withMessage('La date est obligatoire')
    .isISO8601()
    .withMessage('Format de date invalide')
    .custom(value => {
      if (new Date(value) <= new Date()) {
        throw new Error('La date doit √™tre dans le futur');
      }
      return true;
    }),
    
  body('maxParticipants')
    .notEmpty()
    .withMessage('Le nombre maximum de participants est obligatoire')
    .isInt({ min: 1, max: 100 })
    .withMessage('Le nombre de participants doit √™tre entre 1 et 100'),
    
  body('pricing.basePrice')
    .notEmpty()
    .withMessage('Le prix de base est obligatoire')
    .isFloat({ min: 0 })
    .withMessage('Le prix doit √™tre positif'),
    
  body('pricing.depositPercentage')
    .optional()
    .isInt({ min: 10, max: 100 })
    .withMessage('Le pourcentage d\'acompte doit √™tre entre 10 et 100'),
    
  body('organizer.name')
    .notEmpty()
    .withMessage('Le nom de l\'organisateur est obligatoire')
    .trim(),
    
  body('organizer.phone')
    .notEmpty()
    .withMessage('Le t√©l√©phone de l\'organisateur est obligatoire')
    .isMobilePhone('fr-FR')
    .withMessage('Num√©ro de t√©l√©phone invalide'),
    
  body('meetingPoint.name')
    .notEmpty()
    .withMessage('Le point de rendez-vous est obligatoire')
    .trim(),
    
  body('status')
    .optional()
    .isIn(['draft', 'published', 'cancelled', 'completed', 'suspended'])
    .withMessage('Statut invalide')
];

// Validation pour l'ajout de participants
const validateParticipant = [
  body('userId')
    .notEmpty()
    .withMessage('L\'ID utilisateur est obligatoire')
    .isMongoId()
    .withMessage('ID utilisateur invalide'),
    
  body('numberOfPersons')
    .notEmpty()
    .withMessage('Le nombre de personnes est obligatoire')
    .isInt({ min: 1, max: 10 })
    .withMessage('Le nombre de personnes doit √™tre entre 1 et 10'),
    
  body('fullName')
    .notEmpty()
    .withMessage('Le nom complet est obligatoire')
    .trim(),
    
  body('email')
    .notEmpty()
    .withMessage('L\'email est obligatoire')
    .isEmail()
    .withMessage('Format d\'email invalide')
    .normalizeEmail(),
    
  body('phone')
    .notEmpty()
    .withMessage('Le t√©l√©phone est obligatoire')
    .isMobilePhone('fr-FR')
    .withMessage('Num√©ro de t√©l√©phone invalide'),
    
  body('specialRequests')
    .optional()
    .isLength({ max: 500 })
    .withMessage('Les demandes sp√©ciales ne peuvent pas d√©passer 500 caract√®res')
    .trim()
];

// Validation pour les paiements
const validatePayment = [
  body('amount')
    .notEmpty()
    .withMessage('Le montant est obligatoire')
    .isFloat({ min: 0 })
    .withMessage('Le montant doit √™tre positif'),
    
  body('type')
    .notEmpty()
    .withMessage('Le type de paiement est obligatoire')
    .isIn(['deposit', 'balance', 'refund', 'penalty'])
    .withMessage('Type de paiement invalide'),
    
  body('method')
    .notEmpty()
    .withMessage('La m√©thode de paiement est obligatoire')
    .isIn(['cash', 'card', 'mobile_money', 'bank_transfer'])
    .withMessage('M√©thode de paiement invalide'),
    
  body('status')
    .optional()
    .isIn(['pending', 'success', 'failed', 'cancelled'])
    .withMessage('Statut de paiement invalide'),
    
  body('transactionId')
    .optional()
    .trim(),
    
  body('notes')
    .optional()
    .isLength({ max: 300 })
    .withMessage('Les notes ne peuvent pas d√©passer 300 caract√®res')
    .trim()
];

// Validation des param√®tres MongoDB ID
const validateMongoId = (paramName) => [
  param(paramName)
    .isMongoId()
    .withMessage(`${paramName} invalide`)
];

// Validation des param√®tres de requ√™te pour la pagination
const validatePaginationQuery = [
  query('page')
    .optional()
    .isInt({ min: 1 })
    .withMessage('Le num√©ro de page doit √™tre positif'),
    
  query('limit')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('La limite doit √™tre entre 1 et 100'),
    
  query('sortBy')
    .optional()
    .isIn(['date', 'title', 'createdAt', 'maxParticipants', 'currentParticipants', 'status'])
    .withMessage('Champ de tri invalide'),
    
  query('sortOrder')
    .optional()
    .isIn(['asc', 'desc'])
    .withMessage('Ordre de tri invalide'),
    
  query('status')
    .optional()
    .isIn(['all', 'draft', 'published', 'cancelled', 'completed', 'suspended'])
    .withMessage('Statut de filtre invalide'),
    
  query('upcoming')
    .optional()
    .isBoolean()
    .withMessage('Le param√®tre upcoming doit √™tre un bool√©en'),
    
  query('search')
    .optional()
    .isLength({ min: 2, max: 100 })
    .withMessage('La recherche doit contenir entre 2 et 100 caract√®res')
    .trim()
];

// Middleware pour v√©rifier les erreurs de validation
const handleValidationErrors = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      success: false,
      message: 'Erreurs de validation',
      errors: errors.array().map(error => ({
        field: error.param,
        message: error.msg,
        value: error.value
      }))
    });
  }
  next();
};

// ======= ROUTES PRINCIPALES =======

// üìä STATISTIQUES DASHBOARD (doit √™tre avant les routes avec param√®tres)
router.get('/admin/dashboard', 
  verifyToken, 
  excursionController.getDashboardStats
);

// üéØ CR√âER UNE EXCURSION
router.post('/', 
  verifyToken, 
   checkRole(['superAdmin', 'maintenancier']),                                   // Authentification requise
  excursionController.uploadMiddleware,           // Upload d'images
  validateExcursion,                              // Validation des donn√©es
  handleValidationErrors,                         // Gestion des erreurs
  excursionController.createExcursion
);

// üìã OBTENIR TOUTES LES EXCURSIONS (avec filtres et pagination)
router.get('/', 
     checkRole(['superAdmin', 'maintenancier']),
  validatePaginationQuery,                        // Validation des param√®tres de requ√™te
  handleValidationErrors,
  excursionController.getAllExcursions
);

// üîç OBTENIR UNE EXCURSION PAR ID
router.get('/:id', 
  validateMongoId('id'),                          // Validation de l'ID MongoDB
  handleValidationErrors,
  excursionController.getExcursionById
);

// ‚úèÔ∏è METTRE √Ä JOUR UNE EXCURSION
router.put('/:id', 
  verifyToken, 
   checkRole(['superAdmin', 'maintenancier']),                                   // Authentification requise
  validateMongoId('id'),                          // Validation de l'ID
  excursionController.uploadMiddleware,           // Upload d'images optionnel
  validateExcursion,                              // Validation des donn√©es
  handleValidationErrors,
  excursionController.updateExcursion
);

// üóëÔ∏è SUPPRIMER UNE EXCURSION
router.delete('/:id',
     checkRole(['superAdmin', 'maintenancier']), 
  verifyToken,                                    // Authentification requise
  validateMongoId('id'),                          // Validation de l'ID
  handleValidationErrors,
  excursionController.deleteExcursion
);

// ======= ROUTES SP√âCIALIS√âES PAR LIEU =======

// üèùÔ∏è OBTENIR LES EXCURSIONS POUR UN LIEU SP√âCIFIQUE
router.get('/place/:treasureId', 
  validateMongoId('treasureId'),                  // Validation de l'ID du lieu
  query('upcoming').optional().isBoolean(),      // Validation du param√®tre upcoming
  query('status').optional().isIn(['all', 'draft', 'published', 'cancelled', 'completed']),
  handleValidationErrors,
  excursionController.getExcursionsByTreasure
);

// ======= GESTION DES PARTICIPANTS =======

// üë§ AJOUTER UN PARTICIPANT √Ä UNE EXCURSION
router.post('/:excursionId/participants', 
  verifyToken,                                    // Authentification requise
  validateMongoId('excursionId'),                 // Validation de l'ID excursion
  validateParticipant,                            // Validation des donn√©es participant
  handleValidationErrors,
  excursionController.addParticipant
);

// üë• OBTENIR LES PARTICIPANTS D'UNE EXCURSION
router.get('/:excursionId/participants', 
  verifyToken, 
   checkRole(['superAdmin', 'maintenancier']),                                   // Authentification requise (donn√©es sensibles)
  validateMongoId('excursionId'),                 // Validation de l'ID excursion
  handleValidationErrors,
  excursionController.getParticipants
);

// üîç V√âRIFIER LE STATUT D'UN UTILISATEUR POUR UNE EXCURSION
router.get('/:excursionId/user-status/:userId', 
  validateMongoId('excursionId'),                 // Validation de l'ID excursion
  validateMongoId('userId'),                      // Validation de l'ID utilisateur
  handleValidationErrors,
  excursionController.getUserExcursionStatus
);

// ======= GESTION DES PAIEMENTS =======

// üí∞ ENREGISTRER UN PAIEMENT
router.post('/:excursionId/participants/:participantId/payments', 
  verifyToken,                                    // Authentification requise
  validateMongoId('excursionId'),                 // Validation de l'ID excursion
  validateMongoId('participantId'),               // Validation de l'ID participant
  validatePayment,                                // Validation des donn√©es de paiement
  handleValidationErrors,
  excursionController.recordPayment
);

// ======= ROUTES UTILISATEUR =======

// üë§ OBTENIR LES EXCURSIONS D'UN UTILISATEUR
router.get('/user/:userId', 
  validateMongoId('userId'),                      // Validation de l'ID utilisateur
  query('status').optional().isIn(['all', 'pending', 'deposit_paid', 'fully_paid', 'cancelled']),
  query('upcoming').optional().isBoolean(),
  handleValidationErrors,
  excursionController.getUserExcursions
);

// ======= ROUTES ADMINISTRATIVES =======

// üìä STATISTIQUES D√âTAILL√âES (route alternative avec plus de d√©tails)
router.get('/admin/stats/detailed', 
  verifyToken,
  checkRole(['superAdmin', 'maintenancier']),                                    // Authentification admin requise
  async (req, res) => {
    try {
      // Cette route pourrait √™tre √©tendue pour des statistiques plus d√©taill√©es
      const stats = await excursionController.getDashboardStats(req, res);
      
      // Ajouter des m√©triques suppl√©mentaires si n√©cessaire
      // Par exemple : revenus par mois, taux de conversion, etc.
      
    } catch (error) {
      res.status(500).json({
        success: false,
        message: 'Erreur lors de la r√©cup√©ration des statistiques d√©taill√©es',
        error: error.message
      });
    }
  }
);

// üîß ROUTE DE TEST/SANT√â
router.get('/health', (req, res) => {
  res.status(200).json({
    success: true,
    message: 'Service excursions op√©rationnel',
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

// ======= MIDDLEWARE DE GESTION D'ERREURS =======

// Middleware pour capturer les erreurs non g√©r√©es dans les routes
router.use((error, req, res, next) => {
  console.error('‚ùå Erreur dans les routes excursions:', error);
  
  // Erreurs Mongoose
  if (error.name === 'ValidationError') {
    return res.status(400).json({
      success: false,
      message: 'Erreur de validation MongoDB',
      errors: Object.values(error.errors).map(err => ({
        field: err.path,
        message: err.message
      }))
    });
  }
  
  // Erreurs de cast MongoDB (ID invalide)
  if (error.name === 'CastError') {
    return res.status(400).json({
      success: false,
      message: 'ID MongoDB invalide',
      field: error.path
    });
  }
  
  // Erreurs Multer (upload)
  if (error.code === 'LIMIT_FILE_SIZE') {
    return res.status(413).json({
      success: false,
      message: 'Fichier trop volumineux (max 5MB)'
    });
  }
  
  if (error.code === 'LIMIT_UNEXPECTED_FILE') {
    return res.status(400).json({
      success: false,
      message: 'Type de fichier non autoris√©'
    });
  }
  
  // Erreur g√©n√©rique
  res.status(500).json({
    success: false,
    message: 'Erreur interne du serveur',
    error: process.env.NODE_ENV === 'development' ? error.message : 'Une erreur s\'est produite'
  });
});

module.exports = router;*/


// routes/excursionRoutes.js - VERSION CORRIG√âE
/*const express = require('express');
const router = express.Router();
const { body, param, query, validationResult } = require('express-validator'); // ‚úÖ Ajout validationResult
const excursionController = require('../controllers/excursionController');
const { verifyToken } = require('../middlewares/jwt_token');
const { checkRole } = require('../middlewares/checkRole');

// ======= MIDDLEWARES DE VALIDATION (inchang√©s) =======

const validateExcursion = [
  body('title')
    .notEmpty()
    .withMessage('Le titre est obligatoire')
    .isLength({ min: 5, max: 200 })
    .withMessage('Le titre doit contenir entre 5 et 200 caract√®res')
    .trim(),
    
  body('description')
    .notEmpty()
    .withMessage('La description est obligatoire')
    .isLength({ min: 20, max: 2000 })
    .withMessage('La description doit contenir entre 20 et 2000 caract√®res')
    .trim(),
    
    body('treasureId')
    .notEmpty()
    .withMessage('Le lieu (treasureId) est obligatoire')
    .isString()  // ‚úÖ CORRECTION
    .withMessage('L\'ID du lieu doit √™tre une cha√Æne')
    .trim()
    .isLength({ min: 1 })
    .withMessage('L\'ID du lieu ne peut pas √™tre vide'),
    
  body('date')
    .notEmpty()
    .withMessage('La date est obligatoire')
    .isISO8601()
    .withMessage('Format de date invalide')
    .custom(value => {
      if (new Date(value) <= new Date()) {
        throw new Error('La date doit √™tre dans le futur');
      }
      return true;
    }),
    
  body('maxParticipants')
    .notEmpty()
    .withMessage('Le nombre maximum de participants est obligatoire')
    .isInt({ min: 1, max: 100 })
    .withMessage('Le nombre de participants doit √™tre entre 1 et 100'),
    
  body('pricing.basePrice')
    .notEmpty()
    .withMessage('Le prix de base est obligatoire')
    .isFloat({ min: 0 })
    .withMessage('Le prix doit √™tre positif'),
    
  body('pricing.depositPercentage')
    .optional()
    .isInt({ min: 10, max: 100 })
    .withMessage('Le pourcentage d\'acompte doit √™tre entre 10 et 100'),
    
  body('organizer.name')
    .notEmpty()
    .withMessage('Le nom de l\'organisateur est obligatoire')
    .trim(),
    
  body('organizer.phone')
    .notEmpty()
    .withMessage('Le t√©l√©phone de l\'organisateur est obligatoire')
    .isMobilePhone('fr-FR')
    .withMessage('Num√©ro de t√©l√©phone invalide'),
    
  body('meetingPoint.name')
    .notEmpty()
    .withMessage('Le point de rendez-vous est obligatoire')
    .trim(),
    
  body('status')
    .optional()
    .isIn(['draft', 'published', 'cancelled', 'completed', 'suspended'])
    .withMessage('Statut invalide')
];

const validateParticipant = [
  body('userId')
    .notEmpty()
    .withMessage('L\'ID utilisateur est obligatoire')
    .isMongoId()
    .withMessage('ID utilisateur invalide'),
    
  body('numberOfPersons')
    .notEmpty()
    .withMessage('Le nombre de personnes est obligatoire')
    .isInt({ min: 1, max: 10 })
    .withMessage('Le nombre de personnes doit √™tre entre 1 et 10'),
    
  body('fullName')
    .notEmpty()
    .withMessage('Le nom complet est obligatoire')
    .trim(),
    
  body('email')
    .notEmpty()
    .withMessage('L\'email est obligatoire')
    .isEmail()
    .withMessage('Format d\'email invalide')
    .normalizeEmail(),
    
  body('phone')
    .notEmpty()
    .withMessage('Le t√©l√©phone est obligatoire')
    .isMobilePhone('fr-FR')
    .withMessage('Num√©ro de t√©l√©phone invalide'),
    
  body('specialRequests')
    .optional()
    .isLength({ max: 500 })
    .withMessage('Les demandes sp√©ciales ne peuvent pas d√©passer 500 caract√®res')
    .trim()
];

const validatePayment = [
  body('amount')
    .notEmpty()
    .withMessage('Le montant est obligatoire')
    .isFloat({ min: 0 })
    .withMessage('Le montant doit √™tre positif'),
    
  body('type')
    .notEmpty()
    .withMessage('Le type de paiement est obligatoire')
    .isIn(['deposit', 'balance', 'refund', 'penalty'])
    .withMessage('Type de paiement invalide'),
    
  body('method')
    .notEmpty()
    .withMessage('La m√©thode de paiement est obligatoire')
    .isIn(['cash', 'card', 'mobile_money', 'bank_transfer'])
    .withMessage('M√©thode de paiement invalide'),
    
  body('status')
    .optional()
    .isIn(['pending', 'success', 'failed', 'cancelled'])
    .withMessage('Statut de paiement invalide'),
    
  body('transactionId')
    .optional()
    .trim(),
    
  body('notes')
    .optional()
    .isLength({ max: 300 })
    .withMessage('Les notes ne peuvent pas d√©passer 300 caract√®res')
    .trim()
];

const validateMongoId = (paramName) => [
  param(paramName)
    .isMongoId()
    .withMessage(`${paramName} invalide`)
];

const validatePaginationQuery = [
  query('page')
    .optional()
    .isInt({ min: 1 })
    .withMessage('Le num√©ro de page doit √™tre positif'),
    
  query('limit')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('La limite doit √™tre entre 1 et 100'),
    
  query('sortBy')
    .optional()
    .isIn(['date', 'title', 'createdAt', 'maxParticipants', 'currentParticipants', 'status'])
    .withMessage('Champ de tri invalide'),
    
  query('sortOrder')
    .optional()
    .isIn(['asc', 'desc'])
    .withMessage('Ordre de tri invalide'),
    
  query('status')
    .optional()
    .isIn(['all', 'draft', 'published', 'cancelled', 'completed', 'suspended'])
    .withMessage('Statut de filtre invalide'),
    
  query('upcoming')
    .optional()
    .isBoolean()
    .withMessage('Le param√®tre upcoming doit √™tre un bool√©en'),
    
  query('search')
    .optional()
    .isLength({ min: 2, max: 100 })
    .withMessage('La recherche doit contenir entre 2 et 100 caract√®res')
    .trim()
];

const handleValidationErrors = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      success: false,
      message: 'Erreurs de validation',
      errors: errors.array().map(error => ({
        field: error.param,
        message: error.msg,
        value: error.value
      }))
    });
  }
  next();
};

// ======= ROUTES PRINCIPALES CORRIG√âES =======

// üìä STATISTIQUES DASHBOARD (doit √™tre avant les routes avec param√®tres)
router.get('/admin/dashboard', 
  verifyToken,                                    // ‚úÖ Auth d'abord
  checkRole(['superAdmin', 'maintenancier']),     // ‚úÖ Puis r√¥le
  excursionController.getDashboardStats
);

// üéØ CR√âER UNE EXCURSION
router.post('/', 
  verifyToken,                                    // ‚úÖ Auth d'abord
  checkRole(['superAdmin', 'maintenancier']),     // ‚úÖ Puis r√¥le
  excursionController.uploadMiddleware,           // Upload d'images
  //validateExcursion,                              // Validation des donn√©es
  handleValidationErrors,                         // Gestion des erreurs
  excursionController.createExcursion
);

// üìã OBTENIR TOUTES LES EXCURSIONS (avec filtres et pagination)
router.get('/', 
  verifyToken,                                    // ‚úÖ Auth d'abord
  checkRole(['superAdmin', 'maintenancier']),     // ‚úÖ Puis r√¥le
  validatePaginationQuery,                        // Validation des param√®tres de requ√™te
  handleValidationErrors,
  excursionController.getAllExcursions
);

// üîç OBTENIR UNE EXCURSION PAR ID
router.get('/:id', 
  validateMongoId('id'),                          // Validation de l'ID MongoDB
  handleValidationErrors,
  excursionController.getExcursionById
);

// ‚úèÔ∏è METTRE √Ä JOUR UNE EXCURSION
router.put('/:id', 
  verifyToken,                                    // ‚úÖ Auth d'abord
  checkRole(['superAdmin', 'maintenancier']),     // ‚úÖ Puis r√¥le
  validateMongoId('id'),                          // Validation de l'ID
  excursionController.uploadMiddleware,           // Upload d'images optionnel
  //validateExcursion,                              // Validation des donn√©es
  handleValidationErrors,
  excursionController.updateExcursion
);

// üóëÔ∏è SUPPRIMER UNE EXCURSION
router.delete('/:id',
  verifyToken,                                    // ‚úÖ Auth d'abord
  checkRole(['superAdmin', 'maintenancier']),     // ‚úÖ Puis r√¥le
  validateMongoId('id'),                          // Validation de l'ID
  handleValidationErrors,
  excursionController.deleteExcursion
);

// ======= ROUTES SP√âCIALIS√âES PAR LIEU =======

// üèùÔ∏è OBTENIR LES EXCURSIONS POUR UN LIEU SP√âCIFIQUE (publique)
router.get('/place/:treasureId', 
  validateMongoId('treasureId'),                  // Validation de l'ID du lieu
  query('upcoming').optional().isBoolean(),      // Validation du param√®tre upcoming
  query('status').optional().isIn(['all', 'draft', 'published', 'cancelled', 'completed']),
  handleValidationErrors,
  excursionController.getExcursionsByTreasure
);

// ======= GESTION DES PARTICIPANTS =======

// üë§ AJOUTER UN PARTICIPANT √Ä UNE EXCURSION
router.post('/:excursionId/participants', 
  verifyToken,                                    // Authentification requise
  validateMongoId('excursionId'),                 // Validation de l'ID excursion
  validateParticipant,                            // Validation des donn√©es participant
  handleValidationErrors,
  excursionController.addParticipant
);

// üë• OBTENIR LES PARTICIPANTS D'UNE EXCURSION
router.get('/:excursionId/participants', 
  verifyToken,                                    // ‚úÖ Auth d'abord
  checkRole(['superAdmin', 'maintenancier']),     // ‚úÖ Puis r√¥le (donn√©es sensibles)
  validateMongoId('excursionId'),                 // Validation de l'ID excursion
  handleValidationErrors,
  excursionController.getParticipants
);

// üîç V√âRIFIER LE STATUT D'UN UTILISATEUR POUR UNE EXCURSION
router.get('/:excursionId/user-status/:userId', 
  validateMongoId('excursionId'),                 // Validation de l'ID excursion
  validateMongoId('userId'),                      // Validation de l'ID utilisateur
  handleValidationErrors,
  excursionController.getUserExcursionStatus
);

// ======= GESTION DES PAIEMENTS =======

// üí∞ ENREGISTRER UN PAIEMENT
router.post('/:excursionId/participants/:participantId/payments', 
  verifyToken,                                    // Authentification requise
  validateMongoId('excursionId'),                 // Validation de l'ID excursion
  validateMongoId('participantId'),               // Validation de l'ID participant
  validatePayment,                                // Validation des donn√©es de paiement
  handleValidationErrors,
  excursionController.recordPayment
);

// ======= ROUTES UTILISATEUR =======

// üë§ OBTENIR LES EXCURSIONS D'UN UTILISATEUR
router.get('/user/:userId', 
  validateMongoId('userId'),                      // Validation de l'ID utilisateur
  query('status').optional().isIn(['all', 'pending', 'deposit_paid', 'fully_paid', 'cancelled']),
  query('upcoming').optional().isBoolean(),
  handleValidationErrors,
  excursionController.getUserExcursions
);

// ======= ROUTES ADMINISTRATIVES =======

// üìä STATISTIQUES D√âTAILL√âES
router.get('/admin/stats/detailed', 
  verifyToken,                                    // ‚úÖ Auth d'abord
  checkRole(['superAdmin', 'maintenancier']),     // ‚úÖ Puis r√¥le
  async (req, res) => {
    try {
      const stats = await excursionController.getDashboardStats(req, res);
    } catch (error) {
      res.status(500).json({
        success: false,
        message: 'Erreur lors de la r√©cup√©ration des statistiques d√©taill√©es',
        error: error.message
      });
    }
  }
);

// üîß ROUTE DE TEST/SANT√â (publique)
router.get('/health', (req, res) => {
  res.status(200).json({
    success: true,
    message: 'Service excursions op√©rationnel',
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

// ======= MIDDLEWARE DE GESTION D'ERREURS =======

router.use((error, req, res, next) => {
  console.error('‚ùå Erreur dans les routes excursions:', error);
  
  if (error.name === 'ValidationError') {
    return res.status(400).json({
      success: false,
      message: 'Erreur de validation MongoDB',
      errors: Object.values(error.errors).map(err => ({
        field: err.path,
        message: err.message
      }))
    });
  }
  
  if (error.name === 'CastError') {
    return res.status(400).json({
      success: false,
      message: 'ID MongoDB invalide',
      field: error.path
    });
  }
  
  if (error.code === 'LIMIT_FILE_SIZE') {
    return res.status(413).json({
      success: false,
      message: 'Fichier trop volumineux (max 5MB)'
    });
  }
  
  if (error.code === 'LIMIT_UNEXPECTED_FILE') {
    return res.status(400).json({
      success: false,
      message: 'Type de fichier non autoris√©'
    });
  }
  
  res.status(500).json({
    success: false,
    message: 'Erreur interne du serveur',
    error: process.env.NODE_ENV === 'development' ? error.message : 'Une erreur s\'est produite'
  });
});

module.exports = router;*/


// routes/excursionRoutes.js - VERSION CORRIG√âE POUR CORRESPONDRE EXACTEMENT AUX MOD√àLES

/*const express = require('express');
const router = express.Router();
const { body, param, query, validationResult } = require('express-validator');
const excursionController = require('../controllers/excursionController');
const { verifyToken } = require('../middlewares/jwt_token');
const { checkRole } = require('../middlewares/checkRole');

// ===== üõ†Ô∏è VALIDATIONS CORRIG√âES POUR CORRESPONDRE EXACTEMENT AUX MOD√àLES =====

// ‚úÖ VALIDATION EXCURSION ID (ObjectId par d√©faut MongoDB)
const validateExcursionId = [
  param('id')
    .isMongoId()
    .withMessage('L\'ID de l\'excursion doit √™tre un ObjectId MongoDB valide')
];

// ‚úÖ VALIDATION EXCURSION ID POUR PARAM√àTRE NOMM√â
const validateExcursionIdParam = (paramName = 'excursionId') => [
  param(paramName)
    .isMongoId()
    .withMessage(`${paramName} doit √™tre un ObjectId MongoDB valide`)
];

// ‚úÖ VALIDATION TREASURE ID (String selon votre mod√®le Treasure)
const validateTreasureId = [
  param('treasureId')
    .notEmpty()
    .withMessage('TreasureId requis')
    .isString()
    .withMessage('TreasureId doit √™tre une cha√Æne')
    .isLength({ min: 1, max: 50 })
    .withMessage('TreasureId invalide (1-50 caract√®res)')
    .trim()
];

// ‚úÖ VALIDATION USER ID (ObjectId selon votre mod√®le User)
const validateUserId = [
  param('userId')
    .isMongoId()
    .withMessage('UserId doit √™tre un ObjectId MongoDB valide')
];

// ‚úÖ VALIDATION PARTICIPANT ID (ObjectId - c'est l'_id du sous-document participant)
const validateParticipantId = [
  param('participantId')
    .isMongoId()
    .withMessage('ParticipantId doit √™tre un ObjectId MongoDB valide')
];

/*const validatePaginationQuery = [
  query('page')
    .optional()
    .isInt({ min: 1 })
    .withMessage('Le num√©ro de page doit √™tre positif'),
    
  query('limit')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('La limite doit √™tre entre 1 et 100'),
    
  query('sortBy')
    .optional()
    .isIn(['date', 'title', 'createdAt', 'maxParticipants', 'currentParticipants', 'status'])
    .withMessage('Champ de tri invalide'),
    
  query('sortOrder')
    .optional()
    .isIn(['asc', 'desc'])
    .withMessage('Ordre de tri invalide'),
    
  query('status')
    .optional()
    .isIn(['all', 'draft', 'published', 'cancelled', 'completed', 'suspended'])
    .withMessage('Statut de filtre invalide'),
    
  query('upcoming')
    .optional()
    .isBoolean()
    .withMessage('Le param√®tre upcoming doit √™tre un bool√©en'),
    
  query('search')
    .optional()
    .isLength({ min: 2, max: 100 })
    .withMessage('La recherche doit contenir entre 2 et 100 caract√®res')
    .trim()
];
const validatePaginationQuery = [
  query('page')
    .optional()
    .isInt({ min: 1 })
    .withMessage('Le num√©ro de page doit √™tre positif'),
    
  query('limit')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('La limite doit √™tre entre 1 et 100'),
    
  query('sortBy')
    .optional()
    .isIn(['date', 'title', 'createdAt', 'maxParticipants', 'currentParticipants', 'status'])
    .withMessage('Champ de tri invalide'),
    
  query('sortOrder')
    .optional()
    .isIn(['asc', 'desc'])
    .withMessage('Ordre de tri invalide'),
    
  query('status')
    .optional()
    .isIn(['all', 'draft', 'published', 'cancelled', 'completed', 'suspended'])
    .withMessage('Statut de filtre invalide'),
    
  query('upcoming')
    .optional()
    .isBoolean()
    .withMessage('Le param√®tre upcoming doit √™tre un bool√©en'),
    
  query('search')
    .optional()
    .isLength({ min: 1, max: 100 })  // ‚úÖ CHANG√â : min: 1 au lieu de min: 2
    .withMessage('La recherche doit contenir entre 1 et 100 caract√®res')
    .trim()
];
const handleValidationErrors = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    console.log('‚ùå Erreurs de validation:', errors.array());
    return res.status(400).json({
      success: false,
      message: 'Erreurs de validation',
      errors: errors.array().map(error => ({
        field: error.param,
        message: error.msg,
        value: error.value
      }))
    });
  }
  next();
};

// ===== üõ£Ô∏è ROUTES CORRIG√âES =====

// üìä STATISTIQUES DASHBOARD (admin seulement)
router.get('/admin/dashboard', 
  verifyToken,
  checkRole(['superAdmin', 'maintenancier']),
  excursionController.getDashboardStats
);

// üéØ CR√âER UNE EXCURSION (admin seulement)
router.post('/', 
  verifyToken,
  checkRole(['superAdmin', 'maintenancier']),
  excursionController.uploadMiddleware,
  handleValidationErrors,
  excursionController.createExcursion
);

// üìã OBTENIR TOUTES LES EXCURSIONS (admin seulement)
router.get('/', 
  verifyToken,
  checkRole(['superAdmin', 'maintenancier']),
  validatePaginationQuery,
  handleValidationErrors,
  excursionController.getAllExcursions
);

// ‚úÖ OBTENIR UNE EXCURSION PAR ID (publique) - OBJECTID
router.get('/:id', 
  validateExcursionId,  // ‚úÖ CORRIG√â - ObjectId pour Excursion._id
  handleValidationErrors,
  excursionController.getExcursionById
);

// ‚úÖ METTRE √Ä JOUR UNE EXCURSION (admin seulement) - OBJECTID
router.put('/:id', 
  verifyToken,
  checkRole(['superAdmin', 'maintenancier']),
  validateExcursionId,  // ‚úÖ CORRIG√â - ObjectId pour Excursion._id
  excursionController.uploadMiddleware,
  handleValidationErrors,
  excursionController.updateExcursion
);

// üóëÔ∏è SUPPRIMER UNE EXCURSION (admin seulement) - OBJECTID
router.delete('/:id',
  verifyToken,
  checkRole(['superAdmin', 'maintenancier']),
  validateExcursionId,  // ‚úÖ CORRIG√â - ObjectId pour Excursion._id
  handleValidationErrors,
  excursionController.deleteExcursion
);

// ===== üèùÔ∏è ROUTES PAR LIEU (PUBLIQUES) - CORRIG√âES =====

// ‚úÖ OBTENIR LES EXCURSIONS POUR UN LIEU SP√âCIFIQUE - TREASURE ID STRING
router.get('/place/:treasureId', 
  validateTreasureId,  // ‚úÖ CORRECT - String pour Treasure._id
  query('upcoming').optional().isBoolean(),
  query('status').optional().isIn(['all', 'draft', 'published', 'cancelled', 'completed']),
  handleValidationErrors,
  excursionController.getExcursionsByTreasure
);

// ===== üë§ GESTION DES PARTICIPANTS =====

// ‚úÖ AJOUTER UN PARTICIPANT √Ä UNE EXCURSION - OBJECTID EXCURSION
router.post('/:excursionId/participants', 
  verifyToken,
  validateExcursionIdParam('excursionId'),  // ‚úÖ CORRIG√â - ObjectId pour Excursion._id
  handleValidationErrors,
  excursionController.addParticipant
);

// ‚úÖ OBTENIR LES PARTICIPANTS D'UNE EXCURSION (admin) - OBJECTID EXCURSION
router.get('/:excursionId/participants', 
  verifyToken,
  checkRole(['superAdmin', 'maintenancier']),
  validateExcursionIdParam('excursionId'),  // ‚úÖ CORRIG√â - ObjectId pour Excursion._id
  handleValidationErrors,
  excursionController.getParticipants
);

// ‚úÖ V√âRIFIER LE STATUT D'UN UTILISATEUR - OBJECTID EXCURSION + OBJECTID USER
router.get('/:excursionId/user-status/:userId', 
  validateExcursionIdParam('excursionId'),  // ‚úÖ CORRIG√â - ObjectId pour Excursion._id
  validateUserId,                           // ‚úÖ CORRECT - ObjectId pour User._id
  handleValidationErrors,
  excursionController.getUserExcursionStatus
);

// ===== üí∞ GESTION DES PAIEMENTS =====

// ‚úÖ ENREGISTRER UN PAIEMENT - OBJECTID EXCURSION + OBJECTID PARTICIPANT
router.post('/:excursionId/participants/:participantId/payments', 
  verifyToken,
  validateExcursionIdParam('excursionId'),  // ‚úÖ CORRIG√â - ObjectId pour Excursion._id
  validateParticipantId,                    // ‚úÖ CORRIG√â - ObjectId pour participant._id
  handleValidationErrors,
  excursionController.recordPayment
);

// ===== üë§ ROUTES UTILISATEUR =====

// ‚úÖ OBTENIR LES EXCURSIONS D'UN UTILISATEUR - OBJECTID USER
router.get('/user/:userId', 
  validateUserId,  // ‚úÖ CORRECT - ObjectId pour User._id
  query('status').optional().isIn(['all', 'pending', 'deposit_paid', 'fully_paid', 'cancelled']),
  query('upcoming').optional().isBoolean(),
  handleValidationErrors,
  excursionController.getUserExcursions
);

// ===== üîß ROUTES DE SANT√â =====

router.get('/health', (req, res) => {
  res.status(200).json({
    success: true,
    message: 'Service excursions op√©rationnel',
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    modelInfo: {
      excursionIdType: 'ObjectId',   // ‚úÖ Excursion._id = ObjectId (d√©faut MongoDB)
      treasureIdType: 'String',      // ‚úÖ Treasure._id = String (d√©fini explicitement)
      userIdType: 'ObjectId',        // ‚úÖ User._id = ObjectId (d√©faut MongoDB)
      participantIdType: 'ObjectId'  // ‚úÖ participant._id = ObjectId (sous-document)
    }
  });
});

// ===== üö® MIDDLEWARE DE GESTION D'ERREURS =====

router.use((error, req, res, next) => {
  console.error('‚ùå Erreur dans les routes excursions:', error);
  
  if (error.name === 'ValidationError') {
    return res.status(400).json({
      success: false,
      message: 'Erreur de validation MongoDB',
      errors: Object.values(error.errors).map(err => ({
        field: err.path,
        message: err.message
      }))
    });
  }
  
  if (error.name === 'CastError') {
    return res.status(400).json({
      success: false,
      message: 'Format d\'ID invalide',
      field: error.path,
      receivedValue: error.value,
      expectedType: error.kind === 'ObjectId' ? 'ObjectId MongoDB' : error.kind
    });
  }
  
  if (error.code === 'LIMIT_FILE_SIZE') {
    return res.status(413).json({
      success: false,
      message: 'Fichier trop volumineux (max 5MB)'
    });
  }
  
  if (error.code === 'LIMIT_UNEXPECTED_FILE') {
    return res.status(400).json({
      success: false,
      message: 'Type de fichier non autoris√©'
    });
  }
  
  res.status(500).json({
    success: false,
    message: 'Erreur interne du serveur',
    error: process.env.NODE_ENV === 'development' ? error.message : 'Une erreur s\'est produite'
  });
});

module.exports = router;*/


// routes/excursions.js
// ‚úÖ √âTAPE 3 - ROUTES (normalement pas de modification n√©cessaire, mais voici le code pour v√©rification)

const express = require('express');
const router = express.Router();
const { body, param, query, validationResult } = require('express-validator');
const excursionController = require('../controllers/excursionController');
const { verifyToken } = require('../middlewares/jwt_token');
const { checkRole } = require('../middlewares/checkRole');

// ===== üõ†Ô∏è VALIDATIONS (inchang√©es) =====

const validateExcursionId = [
  param('id')
    .isMongoId()
    .withMessage('L\'ID de l\'excursion doit √™tre un ObjectId MongoDB valide')
];

const validateExcursionIdParam = (paramName = 'excursionId') => [
  param(paramName)
    .isMongoId()
    .withMessage(`${paramName} doit √™tre un ObjectId MongoDB valide`)
];

const validateTreasureId = [
  param('treasureId')
    .notEmpty()
    .withMessage('TreasureId requis')
    .isString()
    .withMessage('TreasureId doit √™tre une cha√Æne')
    .isLength({ min: 1, max: 50 })
    .withMessage('TreasureId invalide (1-50 caract√®res)')
    .trim()
];

const validateUserId = [
  param('userId')
    .isMongoId()
    .withMessage('UserId doit √™tre un ObjectId MongoDB valide')
];

const validateParticipantId = [
  param('participantId')
    .isMongoId()
    .withMessage('ParticipantId doit √™tre un ObjectId MongoDB valide')
];

const validatePaginationQuery = [
  query('page')
    .optional()
    .isInt({ min: 1 })
    .withMessage('Le num√©ro de page doit √™tre positif'),
    
  query('limit')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('La limite doit √™tre entre 1 et 100'),
    
  query('sortBy')
    .optional()
    .isIn(['date', 'title', 'createdAt', 'maxParticipants', 'currentParticipants', 'status'])
    .withMessage('Champ de tri invalide'),
    
  query('sortOrder')
    .optional()
    .isIn(['asc', 'desc'])
    .withMessage('Ordre de tri invalide'),
    
  query('status')
    .optional()
    .isIn(['all', 'draft', 'published', 'cancelled', 'completed', 'suspended'])
    .withMessage('Statut de filtre invalide'),
    
  query('upcoming')
    .optional()
    .isBoolean()
    .withMessage('Le param√®tre upcoming doit √™tre un bool√©en'),
    
  query('search')
    .optional()
    .isLength({ min: 1, max: 100 })
    .withMessage('La recherche doit contenir entre 1 et 100 caract√®res')
    .trim()
];

// ‚úÖ NOUVELLE VALIDATION POUR LES PARTICIPANTS (optionnelle, validation c√¥t√© contr√¥leur)
const validateParticipantData = [
  body('userId')
    .isMongoId()
    .withMessage('UserId doit √™tre un ObjectId valide'),
    
  body('numberOfPersons')
    .isInt({ min: 1, max: 10 })
    .withMessage('Le nombre de personnes doit √™tre entre 1 et 10'),
    
  body('phone')
    .optional()
    .isString()
    .isLength({ min: 8, max: 20 })
    .withMessage('Format de t√©l√©phone invalide'),
    
  // ‚úÖ VALIDATION CONTACT D'URGENCE (optionnelle c√¥t√© routes, obligatoire c√¥t√© contr√¥leur)
  body('emergencyContact.name')
    .optional()
    .isString()
    .isLength({ min: 2, max: 100 })
    .withMessage('Le nom du contact d\'urgence doit contenir entre 2 et 100 caract√®res'),
    
  body('emergencyContact.phone')
    .optional()
    .isString()
    .isLength({ min: 8, max: 20 })
    .withMessage('Format de t√©l√©phone du contact d\'urgence invalide'),
    
  body('emergencyContact.relation')
    .optional()
    .isString()
    .isIn([
      'conjoint', 'conjointe', '√©poux', '√©pouse', 'mari', 'femme',
      'p√®re', 'm√®re', 'parent', 'fils', 'fille', 'enfant',
      'fr√®re', 's≈ìur', 'grand-p√®re', 'grand-m√®re',
      'oncle', 'tante', 'cousin', 'cousine',
      'ami', 'amie', 'ami proche', 'coll√®gue',
      'tuteur', 'tutrice', 'autre'
    ])
    .withMessage('Relation non reconnue')
];

const handleValidationErrors = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    console.log('‚ùå Erreurs de validation:', errors.array());
    return res.status(400).json({
      success: false,
      message: 'Erreurs de validation',
      errors: errors.array().map(error => ({
        field: error.param,
        message: error.msg,
        value: error.value
      }))
    });
  }
  next();
};

// ===== üõ£Ô∏è ROUTES =====

// üìä STATISTIQUES DASHBOARD (admin seulement)
router.get('/admin/dashboard', 
  verifyToken,
  checkRole(['superAdmin', 'maintenancier']),
  excursionController.getDashboardStats
);

// üéØ CR√âER UNE EXCURSION (admin seulement)
router.post('/', 
  verifyToken,
  checkRole(['superAdmin', 'maintenancier']),
  excursionController.uploadMiddleware,
  handleValidationErrors,
  excursionController.createExcursion
);

// üìã OBTENIR TOUTES LES EXCURSIONS (admin seulement)
router.get('/', 
  verifyToken,
  checkRole(['superAdmin', 'maintenancier']),
  validatePaginationQuery,
  handleValidationErrors,
  excursionController.getAllExcursions
);

// ‚úÖ OBTENIR UNE EXCURSION PAR ID (publique)
router.get('/:id', 
  validateExcursionId,
  handleValidationErrors,
  excursionController.getExcursionById
);

// ‚úÖ METTRE √Ä JOUR UNE EXCURSION (admin seulement)
router.put('/:id', 
  verifyToken,
  checkRole(['superAdmin', 'maintenancier']),
  validateExcursionId,
  excursionController.uploadMiddleware,
  handleValidationErrors,
  excursionController.updateExcursion
);

// üóëÔ∏è SUPPRIMER UNE EXCURSION (admin seulement)
router.delete('/:id',
  verifyToken,
  checkRole(['superAdmin', 'maintenancier']),
  validateExcursionId,
  handleValidationErrors,
  excursionController.deleteExcursion
);

// ===== üèùÔ∏è ROUTES PAR LIEU (PUBLIQUES) =====

// ‚úÖ OBTENIR LES EXCURSIONS POUR UN LIEU SP√âCIFIQUE
router.get('/place/:treasureId', 
  validateTreasureId,
  query('upcoming').optional().isBoolean(),
  query('status').optional().isIn(['all', 'draft', 'published', 'cancelled', 'completed']),
  handleValidationErrors,
  excursionController.getExcursionsByTreasure
);

// ===== üë§ GESTION DES PARTICIPANTS =====

// ‚úÖ AJOUTER UN PARTICIPANT √Ä UNE EXCURSION (avec validation optionnelle)
router.post('/:excursionId/participants', 
  verifyToken,
  validateExcursionIdParam('excursionId'),
  validateParticipantData, // ‚úÖ Validation optionnelle (la vraie validation est dans le contr√¥leur)
  handleValidationErrors,
  excursionController.addParticipant
);

// ‚úÖ OBTENIR LES PARTICIPANTS D'UNE EXCURSION (admin)
router.get('/:excursionId/participants', 
  verifyToken,
  checkRole(['superAdmin', 'maintenancier']),
  validateExcursionIdParam('excursionId'),
  handleValidationErrors,
  excursionController.getParticipants
);

// ‚úÖ V√âRIFIER LE STATUT D'UN UTILISATEUR
router.get('/:excursionId/user-status/:userId', 
  validateExcursionIdParam('excursionId'),
  validateUserId,
  handleValidationErrors,
  excursionController.getUserExcursionStatus
);

// ===== üí∞ GESTION DES PAIEMENTS =====

// ‚úÖ ENREGISTRER UN PAIEMENT
router.post('/:excursionId/participants/:participantId/payments', 
  verifyToken,
  validateExcursionIdParam('excursionId'),
  validateParticipantId,
  handleValidationErrors,
  excursionController.recordPayment
);

// ===== üë§ ROUTES UTILISATEUR =====

// ‚úÖ OBTENIR LES EXCURSIONS D'UN UTILISATEUR
router.get('/user/:userId', 
  validateUserId,
  query('status').optional().isIn(['all', 'pending', 'deposit_paid', 'fully_paid', 'cancelled']),
  query('upcoming').optional().isBoolean(),
  handleValidationErrors,
  excursionController.getUserExcursions
);

// ===== üîß ROUTES DE SANT√â =====

router.get('/health', (req, res) => {
  res.status(200).json({
    success: true,
    message: 'Service excursions op√©rationnel',
    timestamp: new Date().toISOString(),
    version: '2.0.0', // ‚úÖ Version mise √† jour avec t√©l√©phone et contact d'urgence obligatoires
    features: {
      phoneRequired: true,
      emergencyContactRequired: true,
      internationalPhoneSupport: true,
      securityEnhanced: true
    },
    modelInfo: {
      excursionIdType: 'ObjectId',
      treasureIdType: 'String',
      userIdType: 'ObjectId',
      participantIdType: 'ObjectId'
    }
  });
});

// ===== üö® MIDDLEWARE DE GESTION D'ERREURS =====

router.use((error, req, res, next) => {
  console.error('‚ùå Erreur dans les routes excursions:', error);
  
  if (error.name === 'ValidationError') {
    return res.status(400).json({
      success: false,
      message: 'Erreur de validation MongoDB',
      errors: Object.values(error.errors).map(err => ({
        field: err.path,
        message: err.message
      }))
    });
  }
  
  if (error.name === 'CastError') {
    return res.status(400).json({
      success: false,
      message: 'Format d\'ID invalide',
      field: error.path,
      receivedValue: error.value,
      expectedType: error.kind === 'ObjectId' ? 'ObjectId MongoDB' : error.kind
    });
  }
  
  if (error.code === 'LIMIT_FILE_SIZE') {
    return res.status(413).json({
      success: false,
      message: 'Fichier trop volumineux (max 5MB)'
    });
  }
  
  if (error.code === 'LIMIT_UNEXPECTED_FILE') {
    return res.status(400).json({
      success: false,
      message: 'Type de fichier non autoris√©'
    });
  }
  
  res.status(500).json({
    success: false,
    message: 'Erreur interne du serveur',
    error: process.env.NODE_ENV === 'development' ? error.message : 'Une erreur s\'est produite'
  });
});

module.exports = router;