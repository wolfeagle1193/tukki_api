// =====================================================================
// üîß MIDDLEWARE DE VALIDATION POUR LES PARAM√àTRES DE R√âGION
// Fichier: middlewares/regionValidation.js (nouveau fichier √† cr√©er)
// =====================================================================

const mongoose = require('mongoose');

// =====================================================================
// üîç VALIDATION DES PARAM√àTRES DE R√âGION
// =====================================================================

/**
 * Middleware pour valider les param√®tres de r√©gion dans les routes
 * V√©rifie la pr√©sence et la validit√© du region_id
 */
const validateRegionParams = (req, res, next) => {
  try {
    const { region_id } = req.params;
    
    // V√©rifier la pr√©sence du region_id
    if (!region_id) {
      return res.status(400).json({
        success: false,
        message: "L'ID de la r√©gion est requis.",
        error: 'MISSING_REGION_ID',
        field: 'region_id'
      });
    }
    
    // V√©rifier que ce n'est pas une cha√Æne vide
    if (typeof region_id !== 'string' || region_id.trim() === '') {
      return res.status(400).json({
        success: false,
        message: "L'ID de la r√©gion ne peut pas √™tre vide.",
        error: 'EMPTY_REGION_ID',
        field: 'region_id'
      });
    }
    
    const cleanRegionId = region_id.trim();
    
    // V√©rifier la longueur (MongoDB ObjectId = 24 caract√®res hexad√©cimaux)
    if (cleanRegionId.length !== 24) {
      return res.status(400).json({
        success: false,
        message: "Format d'ID de r√©gion invalide (doit faire 24 caract√®res).",
        error: 'INVALID_REGION_ID_LENGTH',
        field: 'region_id',
        received: cleanRegionId,
        expectedLength: 24,
        actualLength: cleanRegionId.length
      });
    }
    
    // V√©rifier que c'est un ObjectId MongoDB valide
    if (!mongoose.Types.ObjectId.isValid(cleanRegionId)) {
      return res.status(400).json({
        success: false,
        message: "Format d'ID de r√©gion invalide (ObjectId MongoDB attendu).",
        error: 'INVALID_MONGODB_OBJECTID',
        field: 'region_id',
        received: cleanRegionId
      });
    }
    
    // Si tout est valide, nettoyer le param√®tre et continuer
    req.params.region_id = cleanRegionId;
    
    console.log(`‚úÖ Validation region_id r√©ussie: ${cleanRegionId}`);
    next();
    
  } catch (error) {
    console.error('‚ùå Erreur dans validateRegionParams:', error);
    return res.status(500).json({
      success: false,
      message: "Erreur interne lors de la validation des param√®tres.",
      error: 'VALIDATION_INTERNAL_ERROR'
    });
  }
};

// =====================================================================
// üîç VALIDATION DES PARAM√àTRES DE COMMENTAIRE
// =====================================================================

/**
 * Middleware pour valider les param√®tres de commentaire
 * V√©rifie la pr√©sence et la validit√© du comment_id
 */
const validateCommentParams = (req, res, next) => {
  try {
    const { comment_id } = req.params;
    
    if (!comment_id || typeof comment_id !== 'string' || comment_id.trim() === '') {
      return res.status(400).json({
        success: false,
        message: "L'ID du commentaire est requis.",
        error: 'MISSING_COMMENT_ID',
        field: 'comment_id'
      });
    }
    
    const cleanCommentId = comment_id.trim();
    
    if (!mongoose.Types.ObjectId.isValid(cleanCommentId)) {
      return res.status(400).json({
        success: false,
        message: "Format d'ID de commentaire invalide.",
        error: 'INVALID_COMMENT_ID',
        field: 'comment_id',
        received: cleanCommentId
      });
    }
    
    req.params.comment_id = cleanCommentId;
    
    console.log(`‚úÖ Validation comment_id r√©ussie: ${cleanCommentId}`);
    next();
    
  } catch (error) {
    console.error('‚ùå Erreur dans validateCommentParams:', error);
    return res.status(500).json({
      success: false,
      message: "Erreur interne lors de la validation du commentaire.",
      error: 'COMMENT_VALIDATION_INTERNAL_ERROR'
    });
  }
};

// =====================================================================
// üîç VALIDATION DES PARAM√àTRES DE LIKE
// =====================================================================

/**
 * Middleware pour valider les param√®tres de like/unlike
 * V√©rifie le type (photo/comment/reply) et l'ID
 */
const validateLikeParams = (req, res, next) => {
  try {
    const { region_id, type, id } = req.params;
    
    // Valider le type
    const validTypes = ['photo', 'comment', 'reply'];
    if (!type || !validTypes.includes(type)) {
      return res.status(400).json({
        success: false,
        message: "Type de like invalide. Types accept√©s: photo, comment, reply.",
        error: 'INVALID_LIKE_TYPE',
        field: 'type',
        received: type,
        validTypes: validTypes
      });
    }
    
    // Valider l'ID de l'√©l√©ment √† liker
    if (!id || typeof id !== 'string' || id.trim() === '') {
      return res.status(400).json({
        success: false,
        message: "L'ID de l'√©l√©ment √† liker est requis.",
        error: 'MISSING_ITEM_ID',
        field: 'id'
      });
    }
    
    const cleanId = id.trim();
    
    if (!mongoose.Types.ObjectId.isValid(cleanId)) {
      return res.status(400).json({
        success: false,
        message: "Format d'ID d'√©l√©ment invalide.",
        error: 'INVALID_ITEM_ID',
        field: 'id',
        received: cleanId
      });
    }
    
    req.params.id = cleanId;
    
    console.log(`‚úÖ Validation like params r√©ussie: ${type}/${cleanId} sur r√©gion ${region_id}`);
    next();
    
  } catch (error) {
    console.error('‚ùå Erreur dans validateLikeParams:', error);
    return res.status(500).json({
      success: false,
      message: "Erreur interne lors de la validation des param√®tres de like.",
      error: 'LIKE_VALIDATION_INTERNAL_ERROR'
    });
  }
};

// =====================================================================
// üîç VALIDATION DES DONN√âES DE COMMENTAIRE
// =====================================================================

/**
 * Middleware pour valider le contenu des commentaires
 * V√©rifie la pr√©sence et la longueur du commentaire
 */
const validateCommentData = (req, res, next) => {
  try {
    const { comment } = req.body;
    
    if (!comment) {
      return res.status(400).json({
        success: false,
        message: "Le contenu du commentaire est requis.",
        error: 'MISSING_COMMENT_CONTENT',
        field: 'comment'
      });
    }
    
    if (typeof comment !== 'string') {
      return res.status(400).json({
        success: false,
        message: "Le commentaire doit √™tre une cha√Æne de caract√®res.",
        error: 'INVALID_COMMENT_TYPE',
        field: 'comment',
        received: typeof comment
      });
    }
    
    const trimmedComment = comment.trim();
    
    if (trimmedComment.length === 0) {
      return res.status(400).json({
        success: false,
        message: "Le commentaire ne peut pas √™tre vide.",
        error: 'EMPTY_COMMENT',
        field: 'comment'
      });
    }
    
    if (trimmedComment.length < 2) {
      return res.status(400).json({
        success: false,
        message: "Le commentaire doit contenir au moins 2 caract√®res.",
        error: 'COMMENT_TOO_SHORT',
        field: 'comment',
        minLength: 2,
        actualLength: trimmedComment.length
      });
    }
    
    if (trimmedComment.length > 1000) {
      return res.status(400).json({
        success: false,
        message: "Le commentaire ne peut pas d√©passer 1000 caract√®res.",
        error: 'COMMENT_TOO_LONG',
        field: 'comment',
        maxLength: 1000,
        actualLength: trimmedComment.length
      });
    }
    
    // Nettoyer le commentaire
    req.body.comment = trimmedComment;
    
    console.log(`‚úÖ Validation commentaire r√©ussie: ${trimmedComment.length} caract√®res`);
    next();
    
  } catch (error) {
    console.error('‚ùå Erreur dans validateCommentData:', error);
    return res.status(500).json({
      success: false,
      message: "Erreur interne lors de la validation du commentaire.",
      error: 'COMMENT_DATA_VALIDATION_ERROR'
    });
  }
};

// =====================================================================
// üîç VALIDATION DES DONN√âES DE R√âPONSE
// =====================================================================

/**
 * Middleware pour valider le contenu des r√©ponses aux commentaires
 * V√©rifie la pr√©sence et la longueur de la r√©ponse
 */
const validateReplyData = (req, res, next) => {
  try {
    const { reply } = req.body;
    
    if (!reply) {
      return res.status(400).json({
        success: false,
        message: "Le contenu de la r√©ponse est requis.",
        error: 'MISSING_REPLY_CONTENT',
        field: 'reply'
      });
    }
    
    if (typeof reply !== 'string') {
      return res.status(400).json({
        success: false,
        message: "La r√©ponse doit √™tre une cha√Æne de caract√®res.",
        error: 'INVALID_REPLY_TYPE',
        field: 'reply',
        received: typeof reply
      });
    }
    
    const trimmedReply = reply.trim();
    
    if (trimmedReply.length === 0) {
      return res.status(400).json({
        success: false,
        message: "La r√©ponse ne peut pas √™tre vide.",
        error: 'EMPTY_REPLY',
        field: 'reply'
      });
    }
    
    if (trimmedReply.length < 2) {
      return res.status(400).json({
        success: false,
        message: "La r√©ponse doit contenir au moins 2 caract√®res.",
        error: 'REPLY_TOO_SHORT',
        field: 'reply',
        minLength: 2,
        actualLength: trimmedReply.length
      });
    }
    
    if (trimmedReply.length > 500) {
      return res.status(400).json({
        success: false,
        message: "La r√©ponse ne peut pas d√©passer 500 caract√®res.",
        error: 'REPLY_TOO_LONG',
        field: 'reply',
        maxLength: 500,
        actualLength: trimmedReply.length
      });
    }
    
    // Nettoyer la r√©ponse
    req.body.reply = trimmedReply;
    
    console.log(`‚úÖ Validation r√©ponse r√©ussie: ${trimmedReply.length} caract√®res`);
    next();
    
  } catch (error) {
    console.error('‚ùå Erreur dans validateReplyData:', error);
    return res.status(500).json({
      success: false,
      message: "Erreur interne lors de la validation de la r√©ponse.",
      error: 'REPLY_DATA_VALIDATION_ERROR'
    });
  }
};

// =====================================================================
// üîç VALIDATION POUR LES FAVORIS
// =====================================================================

/**
 * Middleware pour valider les param√®tres de requ√™te pour les favoris
 * V√©rifie les param√®tres de tri et de pagination
 */
const validateGetUserFavorites = (req, res, next) => {
  try {
    const { sortBy, page, limit } = req.query;
    
    // Valider sortBy
    if (sortBy) {
      const validSortOptions = ['dateAdded', 'name', 'rating', 'totalReviews'];
      if (!validSortOptions.includes(sortBy)) {
        return res.status(400).json({
          success: false,
          message: "Option de tri invalide.",
          error: 'INVALID_SORT_OPTION',
          field: 'sortBy',
          received: sortBy,
          validOptions: validSortOptions
        });
      }
    }
    
    // Valider page si fournie
    if (page) {
      const pageNum = parseInt(page);
      if (isNaN(pageNum) || pageNum < 1) {
        return res.status(400).json({
          success: false,
          message: "Le num√©ro de page doit √™tre un nombre entier positif.",
          error: 'INVALID_PAGE_NUMBER',
          field: 'page',
          received: page
        });
      }
      req.query.page = pageNum;
    }
    
    // Valider limit si fournie
    if (limit) {
      const limitNum = parseInt(limit);
      if (isNaN(limitNum) || limitNum < 1 || limitNum > 100) {
        return res.status(400).json({
          success: false,
          message: "La limite doit √™tre un nombre entre 1 et 100.",
          error: 'INVALID_LIMIT',
          field: 'limit',
          received: limit,
          min: 1,
          max: 100
        });
      }
      req.query.limit = limitNum;
    }
    
    console.log(`‚úÖ Validation favoris r√©ussie: sortBy=${sortBy || 'default'}, page=${page || 'all'}, limit=${limit || 'all'}`);
    next();
    
  } catch (error) {
    console.error('‚ùå Erreur dans validateGetUserFavorites:', error);
    return res.status(500).json({
      success: false,
      message: "Erreur interne lors de la validation des param√®tres de favoris.",
      error: 'FAVORITES_VALIDATION_ERROR'
    });
  }
};

// =====================================================================
// üìã EXPORTS
// =====================================================================

module.exports = {
  validateRegionParams,
  validateCommentParams,
  validateLikeParams,
  validateCommentData,
  validateReplyData,
  validateGetUserFavorites
};

// =====================================================================
// üìã LOGGING
// =====================================================================

console.log('‚úÖ === MIDDLEWARE VALIDATION R√âGIONS CHARG√â ===');
console.log('üîß Validateurs disponibles:');
console.log('  ‚úÖ validateRegionParams - Validation region_id');
console.log('  ‚úÖ validateCommentParams - Validation comment_id');
console.log('  ‚úÖ validateLikeParams - Validation type/id pour likes');
console.log('  ‚úÖ validateCommentData - Validation contenu commentaire');
console.log('  ‚úÖ validateReplyData - Validation contenu r√©ponse');
console.log('  ‚úÖ validateGetUserFavorites - Validation param√®tres favoris');