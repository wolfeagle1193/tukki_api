// scripts/fixNauticalDirect.js
// Script direct avec URI MongoDB Atlas

const mongoose = require('mongoose');
const RegionDetails = require('../models/RegionDetails');

// ‚úÖ VOTRE URI MONGODB ATLAS DIRECTEMENT
const MONGODB_URI = 'mongodb+srv://tukkisn2025:tukkisn2025@tukki.iudqchg.mongodb.net/tukkisn2025?retryWrites=true&w=majority&appName=tukki';

async function diagnosticEtCorrection() {
    try {
        console.log('üîó Connexion √† MongoDB Atlas...');
        console.log('üìç Base de donn√©es: tukkisn2025\n');
        
        await mongoose.connect(MONGODB_URI);
        console.log('‚úÖ Connect√© √† MongoDB Atlas avec succ√®s!\n');
        
        // === 1. DIAGNOSTIC ===
        console.log('üîç === DIAGNOSTIC "Activit√©s nautiques" ===');
        
        const countNautical = await RegionDetails.countDocuments({
            'services.type': 'Activit√©s nautiques'
        });
        
        console.log(`üìä Entr√©es "Activit√©s nautiques" trouv√©es: ${countNautical}`);
        
        if (countNautical > 0) {
            console.log('\nüö® PROBL√àME CONFIRM√â dans votre base Atlas !');
            
            // Afficher les d√©tails
            const regionsWithNautical = await RegionDetails.find({
                'services.type': 'Activit√©s nautiques'
            }).limit(5);
            
            console.log('\nüìã D√©tails des r√©gions probl√©matiques:');
            regionsWithNautical.forEach((region, index) => {
                const nauticalServices = region.services.filter(s => s.type === 'Activit√©s nautiques');
                console.log(`${index + 1}. R√©gion ID: ${region.region_id}`);
                console.log(`   - ${nauticalServices.length} service(s) "Activit√©s nautiques"`);
                nauticalServices.forEach(service => {
                    console.log(`   - ${service.icon} ${service.description || 'Pas de description'}`);
                });
                console.log('');
            });
            
            // === 2. CORRECTION AUTOMATIQUE ===
            console.log('üîß === CORRECTION AUTOMATIQUE ===');
            console.log('Correction en cours...\n');
            
            const updateResult = await RegionDetails.updateMany(
                { 'services.type': 'Activit√©s nautiques' },
                { 
                    $set: { 
                        'services.$.type': 'Loisirs',
                        'services.$.icon': 'üéØ',
                        'services.$.description': 'Activit√©s de loisirs et divertissements'
                    } 
                }
            );
            
            console.log(`‚úÖ CORRECTION TERMIN√âE !`);
            console.log(`üìà ${updateResult.modifiedCount} r√©gion(s) mise(s) √† jour`);
            console.log(`üìà ${updateResult.matchedCount} r√©gion(s) correspondante(s)`);
            
            // V√©rification finale
            const remainingCount = await RegionDetails.countDocuments({
                'services.type': 'Activit√©s nautiques'
            });
            
            if (remainingCount === 0) {
                console.log('\nüéâ SUCC√àS TOTAL ! Toutes les "Activit√©s nautiques" ont √©t√© √©limin√©es');
            } else {
                console.log(`\n‚ö†Ô∏è ${remainingCount} entr√©e(s) probl√©matique(s) restante(s)`);
            }
            
        } else {
            console.log('\n‚úÖ AUCUNE "Activit√©s nautiques" trouv√©e dans Atlas !');
            console.log('Le probl√®me vient du FRONTEND (JavaScript/React)');
        }
        
        // === 3. STATISTIQUES COMPL√àTES ===
        console.log('\nüìà === STATISTIQUES DES SERVICES ===');
        await afficherStatistiquesServices();
        
        // === 4. ACTIONS SUIVANTES ===
        console.log('\nüéØ === ACTIONS SUIVANTES ===');
        if (countNautical > 0) {
            console.log('1. ‚úÖ Base de donn√©es corrig√©e');
            console.log('2. üîÑ Red√©marrez votre serveur backend');
            console.log('3. üóëÔ∏è Videz le cache navigateur (F12 ‚Üí Application ‚Üí Clear Storage)');
            console.log('4. üîÑ Rechargez votre frontend');
            console.log('5. üß™ Testez la sauvegarde d\'une r√©gion');
        } else {
            console.log('1. üîç V√©rifiez window.REGION_SERVICES dans le navigateur');
            console.log('2. üîç Cherchez "nautiques" dans votre code frontend');
            console.log('3. üóëÔ∏è Videz localStorage.clear() dans la console navigateur');
            console.log('4. üîç V√©rifiez les constantes de services dans RegionDetailsModal.js');
        }
        
    } catch (error) {
        console.error('\n‚ùå ERREUR:', error.message);
        
        if (error.message.includes('authentication failed')) {
            console.log('\nüí° Erreur d\'authentification MongoDB Atlas');
            console.log('‚úÖ V√©rifiez vos identifiants : tukkisn2025 / tukkisn2025');
        } else if (error.message.includes('ENOTFOUND')) {
            console.log('\nüí° Erreur de r√©seau - V√©rifiez votre connexion internet');
        } else {
            console.log('\nüí° Erreur technique:', error.stack);
        }
    }
}

async function afficherStatistiquesServices() {
    try {
        const totalRegions = await RegionDetails.countDocuments();
        console.log(`üìä Total r√©gions dans la base: ${totalRegions}`);
        
        if (totalRegions === 0) {
            console.log('‚ÑπÔ∏è Aucune r√©gion trouv√©e dans la base de donn√©es');
            return;
        }
        
        // Agr√©gation des services
        const pipeline = [
            { $unwind: '$services' },
            { $group: { _id: '$services.type', count: { $sum: 1 } } },
            { $sort: { count: -1 } }
        ];
        
        const serviceStats = await RegionDetails.aggregate(pipeline);
        
        const validTypes = [
            'H√©bergement', 'Restauration', 'Transport', 'Guide touristique', 
            'Loisirs', 'Administration', 'Accessibilit√©', 
            'Boutique souvenirs', 'Sant√©', 'Banque'
        ];
        
        console.log('\nüìã R√©partition des services:');
        if (serviceStats.length === 0) {
            console.log('‚ÑπÔ∏è Aucun service trouv√©');
        } else {
            serviceStats.forEach(stat => {
                const isValid = validTypes.includes(stat._id);
                console.log(`${isValid ? '‚úÖ' : '‚ùå'} ${stat._id}: ${stat.count} utilisation(s)`);
            });
            
            // Compter les services invalides
            const invalidServices = serviceStats.filter(stat => !validTypes.includes(stat._id));
            if (invalidServices.length > 0) {
                console.log(`\n‚ö†Ô∏è ${invalidServices.length} type(s) de service invalide(s) d√©tect√©(s) !`);
            } else {
                console.log('\n‚úÖ Tous les services sont valides !');
            }
        }
        
    } catch (error) {
        console.log('‚ö†Ô∏è Impossible d\'afficher les statistiques:', error.message);
    }
}

// === FONCTION PRINCIPALE ===
async function main() {
    console.log('üöÄ === DIAGNOSTIC ET CORRECTION "Activit√©s nautiques" ===');
    console.log('üìÖ Date:', new Date().toLocaleString());
    console.log('üîó Cible: MongoDB Atlas (tukkisn2025)\n');
    
    try {
        await diagnosticEtCorrection();
        
    } finally {
        try {
            await mongoose.disconnect();
            console.log('\nüîå D√©connexion MongoDB Atlas');
        } catch (e) {
            // Ignorer les erreurs de d√©connexion
        }
        
        console.log('\n‚ú® Script termin√© !');
        process.exit(0);
    }
}

// === EXPORT ET EX√âCUTION ===
module.exports = { diagnosticEtCorrection, afficherStatistiquesServices };

if (require.main === module) {
    main().catch(console.error);
}