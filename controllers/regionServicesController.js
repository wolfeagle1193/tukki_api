// controllers/regionServicesController.js - CONTR√îLEUR POUR LA GESTION DES SERVICES DES R√âGIONS
const RegionDetails = require('../models/RegionDetails');
const Region = require('../models/Region');

// ===== LISTE DES SERVICES DISPONIBLES =====
const AVAILABLE_SERVICES = [
    {
        type: 'H√©bergement',
        icon: 'üè®',
        description: 'H√¥tels, auberges, chambres d\'h√¥tes',
        priority: 1
    },
    {
        type: 'Restauration',
        icon: 'üçΩÔ∏è',
        description: 'Restaurants, caf√©s, bars locaux',
        priority: 2
    },
    {
        type: 'Transport',
        icon: 'üöó',
        description: 'Location v√©hicules, taxis, bus',
        priority: 3
    },
    {
        type: 'Guide touristique',
        icon: 'üë•',
        description: 'Guides locaux, visites organis√©es',
        priority: 4
    },
    {
        type: 'Loisirs',
        icon: 'üéØ',
        description: 'Activit√©s, sports, divertissements',
        priority: 5
    },
    {
        type: 'Administration',
        icon: 'üèõÔ∏è',
        description: 'Services publics, formalit√©s',
        priority: 6
    },
    {
        type: 'Accessibilit√©',
        icon: '‚ôø',
        description: 'Acc√®s PMR, √©quipements adapt√©s',
        priority: 7
    },
    {
        type: 'Boutique souvenirs',
        icon: 'üõçÔ∏è',
        description: 'Artisanat local, souvenirs',
        priority: 8
    },
    {
        type: 'Sant√©',
        icon: 'üè•',
        description: 'Pharmacies, centres de sant√©',
        priority: 9
    },
    {
        type: 'Banque',
        icon: 'üè¶',
        description: 'Banques, distributeurs, change',
        priority: 10
    }
];

// ‚úÖ OBTENIR TOUS LES SERVICES DISPONIBLES
exports.getAvailableServices = async (req, res) => {
    try {
        console.log('üìã Demande de services disponibles');

        res.status(200).json({
            success: true,
            message: 'Services disponibles r√©cup√©r√©s avec succ√®s',
            data: {
                services: AVAILABLE_SERVICES,
                totalServices: AVAILABLE_SERVICES.length
            }
        });

    } catch (error) {
        console.error('‚ùå Erreur getAvailableServices:', error);
        return res.status(500).json({
            success: false,
            message: 'Erreur lors de la r√©cup√©ration des services',
            error: process.env.NODE_ENV === 'development' ? error.message : 'Erreur interne'
        });
    }
};

// ‚úÖ OBTENIR LES SERVICES D'UNE R√âGION SP√âCIFIQUE
exports.getRegionServices = async (req, res) => {
    try {
        const { regionId } = req.params;
        console.log(`üîç R√©cup√©ration services pour la r√©gion: ${regionId}`);

        if (!regionId) {
            return res.status(400).json({
                success: false,
                message: 'ID de la r√©gion requis'
            });
        }

        // V√©rifier si la r√©gion existe
        const regionExists = await Region.findById(regionId);
        if (!regionExists) {
            return res.status(404).json({
                success: false,
                message: 'R√©gion non trouv√©e'
            });
        }

        // R√©cup√©rer les d√©tails de la r√©gion
        let regionDetails = await RegionDetails.findOne({ region_id: regionId });
        
        if (!regionDetails) {
            console.log(`‚ö†Ô∏è Pas de d√©tails trouv√©s pour ${regionId}`);
            return res.status(200).json({
                success: true,
                message: 'Aucun service configur√© pour cette r√©gion',
                data: {
                    regionId: regionId,
                    regionName: regionExists.name,
                    services: [],
                    availableServices: AVAILABLE_SERVICES
                }
            });
        }

        res.status(200).json({
            success: true,
            message: 'Services de la r√©gion r√©cup√©r√©s avec succ√®s',
            data: {
                regionId: regionId,
                regionName: regionExists.name,
                services: regionDetails.services || [],
                totalConfiguredServices: (regionDetails.services || []).length,
                availableServices: AVAILABLE_SERVICES
            }
        });

    } catch (error) {
        console.error('‚ùå Erreur getRegionServices:', error);
        return res.status(500).json({
            success: false,
            message: 'Erreur lors de la r√©cup√©ration des services de la r√©gion',
            error: process.env.NODE_ENV === 'development' ? error.message : 'Erreur interne'
        });
    }
};

// ‚úÖ METTRE √Ä JOUR LES SERVICES D'UNE R√âGION
exports.updateRegionServices = async (req, res) => {
    try {
        const { regionId } = req.params;
        const { services } = req.body;

        console.log(`üîÑ Mise √† jour services pour la r√©gion: ${regionId}`);
        console.log('üìã Services re√ßus:', services);

        // Validations
        if (!regionId) {
            return res.status(400).json({
                success: false,
                message: 'ID de la r√©gion requis'
            });
        }

        if (!Array.isArray(services)) {
            return res.status(400).json({
                success: false,
                message: 'Les services doivent √™tre fournis sous forme de tableau'
            });
        }

        // V√©rifier si la r√©gion existe
        const regionExists = await Region.findById(regionId);
        if (!regionExists) {
            return res.status(404).json({
                success: false,
                message: 'R√©gion non trouv√©e'
            });
        }

        // Valider les services fournis
        const validatedServices = [];
        for (const service of services) {
            if (!service.type) {
                return res.status(400).json({
                    success: false,
                    message: 'Chaque service doit avoir un type'
                });
            }

            // V√©rifier si le service est dans la liste des services disponibles
            const availableService = AVAILABLE_SERVICES.find(s => s.type === service.type);
            if (!availableService) {
                return res.status(400).json({
                    success: false,
                    message: `Service non reconnu: ${service.type}`
                });
            }

            // Utiliser les donn√©es du service disponible comme base
            validatedServices.push({
                type: availableService.type,
                icon: service.icon || availableService.icon,
                description: service.description || availableService.description,
                priority: service.priority !== undefined ? service.priority : availableService.priority,
                isActive: service.isActive !== undefined ? service.isActive : true
            });
        }

        // Chercher ou cr√©er RegionDetails
        let regionDetails = await RegionDetails.findOne({ region_id: regionId });

        if (!regionDetails) {
            console.log(`‚ûï Cr√©ation de RegionDetails pour ${regionId}`);
            regionDetails = new RegionDetails({
                region_id: regionId,
                description: regionExists.description || '',
                location: regionExists.location || regionExists.country || '',
                services: validatedServices,
                gallery: [],
                comments: [],
                photos: [],
                popularPlaces: []
            });
        } else {
            regionDetails.services = validatedServices;
        }

        // Sauvegarder
        await regionDetails.save();

        console.log(`‚úÖ Services mis √† jour: ${validatedServices.length} service(s)`);

        res.status(200).json({
            success: true,
            message: `Services mis √† jour avec succ√®s (${validatedServices.length} service(s))`,
            data: {
                regionId: regionId,
                regionName: regionExists.name,
                services: validatedServices,
                totalServices: validatedServices.length
            }
        });

    } catch (error) {
        console.error('‚ùå Erreur updateRegionServices:', error);
        return res.status(500).json({
            success: false,
            message: 'Erreur lors de la mise √† jour des services',
            error: process.env.NODE_ENV === 'development' ? error.message : 'Erreur interne'
        });
    }
};

// ‚úÖ AJOUTER UN SERVICE √Ä UNE R√âGION
exports.addServiceToRegion = async (req, res) => {
    try {
        const { regionId } = req.params;
        const { serviceType, priority } = req.body;

        console.log(`‚ûï Ajout service ${serviceType} √† la r√©gion ${regionId}`);

        // Validations
        if (!regionId || !serviceType) {
            return res.status(400).json({
                success: false,
                message: 'ID de la r√©gion et type de service requis'
            });
        }

        // V√©rifier si le service existe dans la liste
        const availableService = AVAILABLE_SERVICES.find(s => s.type === serviceType);
        if (!availableService) {
            return res.status(400).json({
                success: false,
                message: `Service non reconnu: ${serviceType}`
            });
        }

        // Chercher les d√©tails de la r√©gion
        let regionDetails = await RegionDetails.findOne({ region_id: regionId });
        if (!regionDetails) {
            return res.status(404).json({
                success: false,
                message: 'D√©tails de la r√©gion non trouv√©s'
            });
        }

        // V√©rifier si le service n'existe pas d√©j√†
        const existingService = regionDetails.services.find(s => s.type === serviceType);
        if (existingService) {
            return res.status(409).json({
                success: false,
                message: `Le service ${serviceType} existe d√©j√† pour cette r√©gion`
            });
        }

        // Cr√©er le nouveau service
        const newService = {
            type: availableService.type,
            icon: availableService.icon,
            description: availableService.description,
            priority: priority !== undefined ? priority : availableService.priority,
            isActive: true
        };

        // Ajouter le service
        regionDetails.services.push(newService);

        await regionDetails.save();

        console.log(`‚úÖ Service ${serviceType} ajout√© avec succ√®s`);

        res.status(201).json({
            success: true,
            message: `Service ${serviceType} ajout√© avec succ√®s`,
            data: {
                addedService: newService,
                totalServices: regionDetails.services.length
            }
        });

    } catch (error) {
        console.error('‚ùå Erreur addServiceToRegion:', error);
        return res.status(500).json({
            success: false,
            message: 'Erreur lors de l\'ajout du service',
            error: process.env.NODE_ENV === 'development' ? error.message : 'Erreur interne'
        });
    }
};

// ‚úÖ SUPPRIMER UN SERVICE D'UNE R√âGION
exports.removeServiceFromRegion = async (req, res) => {
    try {
        const { regionId, serviceType } = req.params;

        console.log(`üóëÔ∏è Suppression service ${serviceType} de la r√©gion ${regionId}`);

        // Validations
        if (!regionId || !serviceType) {
            return res.status(400).json({
                success: false,
                message: 'ID de la r√©gion et type de service requis'
            });
        }

        // Chercher les d√©tails de la r√©gion
        let regionDetails = await RegionDetails.findOne({ region_id: regionId });
        if (!regionDetails) {
            return res.status(404).json({
                success: false,
                message: 'D√©tails de la r√©gion non trouv√©s'
            });
        }

        // V√©rifier si le service existe
        const serviceIndex = regionDetails.services.findIndex(s => s.type === serviceType);
        if (serviceIndex === -1) {
            return res.status(404).json({
                success: false,
                message: `Service ${serviceType} non trouv√© pour cette r√©gion`
            });
        }

        // Supprimer le service
        const removedService = regionDetails.services.splice(serviceIndex, 1)[0];

        await regionDetails.save();

        console.log(`‚úÖ Service ${serviceType} supprim√© avec succ√®s`);

        res.status(200).json({
            success: true,
            message: `Service ${serviceType} supprim√© avec succ√®s`,
            data: {
                removedService: removedService,
                remainingServices: regionDetails.services.length
            }
        });

    } catch (error) {
        console.error('‚ùå Erreur removeServiceFromRegion:', error);
        return res.status(500).json({
            success: false,
            message: 'Erreur lors de la suppression du service',
            error: process.env.NODE_ENV === 'development' ? error.message : 'Erreur interne'
        });
    }
};

// ‚úÖ OBTENIR LES STATISTIQUES DES SERVICES
exports.getServicesStats = async (req, res) => {
    try {
        console.log('üìä Calcul des statistiques des services');

        // R√©cup√©rer tous les RegionDetails avec des services
        const allRegionDetails = await RegionDetails.find({
            services: { $exists: true, $not: { $size: 0 } }
        });

        // Calculer les statistiques
        const stats = {
            totalRegionsWithServices: allRegionDetails.length,
            totalConfiguredServices: 0,
            serviceUsage: {},
            avgServicesPerRegion: 0
        };

        // Calculer l'utilisation par service
        allRegionDetails.forEach(regionDetail => {
            if (regionDetail.services) {
                stats.totalConfiguredServices += regionDetail.services.length;
                
                regionDetail.services.forEach(service => {
                    // Comptage par type de service
                    if (stats.serviceUsage[service.type]) {
                        stats.serviceUsage[service.type]++;
                    } else {
                        stats.serviceUsage[service.type] = 1;
                    }
                });
            }
        });

        // Calcul de la moyenne
        stats.avgServicesPerRegion = allRegionDetails.length > 0 
            ? (stats.totalConfiguredServices / allRegionDetails.length).toFixed(2)
            : 0;

        // Top 5 des services les plus utilis√©s
        stats.topServices = Object.entries(stats.serviceUsage)
            .sort(([,a], [,b]) => b - a)
            .slice(0, 5)
            .map(([service, count]) => ({ service, count }));

        res.status(200).json({
            success: true,
            message: 'Statistiques des services r√©cup√©r√©es avec succ√®s',
            data: stats
        });

    } catch (error) {
        console.error('‚ùå Erreur getServicesStats:', error);
        return res.status(500).json({
            success: false,
            message: 'Erreur lors du calcul des statistiques',
            error: process.env.NODE_ENV === 'development' ? error.message : 'Erreur interne'
        });
    }
};

module.exports = {
    getAvailableServices: exports.getAvailableServices,
    getRegionServices: exports.getRegionServices,
    updateRegionServices: exports.updateRegionServices,
    addServiceToRegion: exports.addServiceToRegion,
    removeServiceFromRegion: exports.removeServiceFromRegion,
    getServicesStats: exports.getServicesStats
};